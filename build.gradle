
plugins {
    id  'java'  
    id 'application'
//    id 'org.javamodularity.moduleplugin'
    id 'org.openjfx.javafxplugin' version '0.0.8'
//    id 'org.beryx.runtime' version '1.9.1'
    id 'org.beryx.jlink' version '2.20.0' //id 'org.beryx.jlink' version '2.12.0'
}


//plugins.withType(JavaPlugin).configureEach {
//    java {
//        modularity.inferModulePath = true
//    }
//}

mainClassName = 'mainGUI_FX.Main'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'mainGUI_FX.Main'
}

repositories {
    jcenter()
    mavenCentral()
    
    flatDir {
        dirs 'src/main/resources/libsfx'
    }
}

dependencies {
    //testImplementation     'junit:junit:4.13'
    implementation 'com.google.api-client:google-api-client:1.23.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
    implementation 'com.google.apis:google-api-services-drive:v3-rev110-1.23.0'
    //    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.32.3'
    implementation 'org.xerial:sqlite-jdbc:3.32.3'
    //    implementation 'org.eclipse.birt.runtime:javax.xml:1.3.4.v201005080400'
    //    implementation 'io.thorntail:javafx:2.7.0.Final'
    compile fileTree(dir: "$buildDir/native-libs",include: 'native-libs.jar' )
    implementation fileTree(include: ['javaf*.jar','**/*.so'], dir: 'libs') //'*.so'
//    implementation fileTree(include: ['*.jar','**/*.so'], dir: 'src/main/resources/libsfx') //'*.so'
}

//compileJava {
//    sourceCompatibility = '1.8'
//    targetCompatibility = '1.8'
//}
//
// compileOptions {
//    sourceCompatibility JavaVersion.VERSION_1_8
//    targetCompatibility JavaVersion.VERSION_1_8
//  }
//
javafx {
    version = "14.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml','javafx.base', 'javafx.graphics', 'javafx.media','javafx.swing','javafx.web']
    //    modules = [ 'javafx.controls', 'javafx.fxml','javafx.base', 'javafx.graphics', 'javafx.media','javafx.swing','javafx.web','javafx-swt']

}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/configs"
        }
    }
}

task nativeLibsTojar(type: Jar,description:'create jar of the native libs'){
    destinationDir file("$buildDir/native-libs")
    baseName 'native-libs'
    from fileTree(dir: 'libs',include: ['**/*.so']) //'*.jar',
    into 'lib/'
    
}
tasks.withType(JavaCompile){compileTask->compileTask.dependsOn(nativeLibsTojar)}
//
jar {
    archiveName = 'GoogleDriveSynchronizatorJava.jar'

    manifest {attributes 'Main-Class': 'mainGUI_FX.Main'}

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        //        configurations.runtimeClasspath.findAll { it.name.endsWith('so') }.collect { zipTree(it) }
    }
}



task uberJar(type: Jar) {
    archiveClassifier = 'uber'
        
    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        configurations.runtimeClasspath.findAll { it.name.endsWith('so') }.collect { zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'GoogleDriveSynchronizatorJava'
    }
}

//////////////////////////////////////////////////////////////////////////////